var search_data = {"index":{"searchIndex":["artifactory","cleaner","artifactbucket","artifactbucketcollection","cli","controller","discoveredartifact","discoveryworker","error","spechelpers","util","float","object","<<()","<<()","[]()","[]=()","add()","alive?()","artifact_count()","artifact_usage_search()","bucket()","bucket_sizes()","bucketize_artifacts()","bucketized_artifact_report()","catagorize_old_assets()","clear()","covers?()","default_repo_table_cols()","define_buckets()","discover_artifacts_from_search()","discover_repos()","earliest_date()","earliest_date_from()","filesize()","generate_artifact()","kill()","last_downloaded()","latest_date()","latest_date_from()","list_repos()","new()","new()","new()","new()","new()","push()","recalculate_filesize()","repo_table_cols()","report()","running?()","shutdown()","start()","stop()","to_s()","unshift()","usage_report()","verbose=()","verbose?()","version()","with_discovered_artifacts()","working?()","yaml_format()","code_of_conduct","gemfile","gemfile.lock","readme","rakefile","artifactory-cleaner.gemspec","artifactory-cleaner.iml","setup"],"longSearchIndex":["artifactory","artifactory::cleaner","artifactory::cleaner::artifactbucket","artifactory::cleaner::artifactbucketcollection","artifactory::cleaner::cli","artifactory::cleaner::controller","artifactory::cleaner::discoveredartifact","artifactory::cleaner::discoveryworker","artifactory::cleaner::error","artifactory::cleaner::spechelpers","artifactory::cleaner::util","float","object","artifactory::cleaner::artifactbucket#<<()","artifactory::cleaner::artifactbucketcollection#<<()","artifactory::cleaner::artifactbucketcollection#[]()","artifactory::cleaner::artifactbucket#[]=()","artifactory::cleaner::artifactbucketcollection#add()","artifactory::cleaner::discoveryworker#alive?()","artifactory::cleaner::artifactbucketcollection#artifact_count()","artifactory::cleaner::controller#artifact_usage_search()","artifactory::cleaner::artifactbucketcollection#bucket()","artifactory::cleaner::artifactbucketcollection#bucket_sizes()","artifactory::cleaner::controller#bucketize_artifacts()","artifactory::cleaner::controller#bucketized_artifact_report()","artifactory::cleaner::controller#catagorize_old_assets()","artifactory::cleaner::artifactbucketcollection#clear()","artifactory::cleaner::artifactbucket#covers?()","artifactory::cleaner::cli::default_repo_table_cols()","artifactory::cleaner::artifactbucketcollection#define_buckets()","artifactory::cleaner::controller#discover_artifacts_from_search()","artifactory::cleaner::controller#discover_repos()","artifactory::cleaner::discoveredartifact#earliest_date()","artifactory::cleaner::discoveredartifact::earliest_date_from()","artifactory::cleaner::util::filesize()","artifactory::cleaner::spechelpers#generate_artifact()","artifactory::cleaner::discoveryworker#kill()","artifactory::cleaner::discoveredartifact#last_downloaded()","artifactory::cleaner::discoveredartifact#latest_date()","artifactory::cleaner::discoveredartifact::latest_date_from()","artifactory::cleaner::cli#list_repos()","artifactory::cleaner::artifactbucket::new()","artifactory::cleaner::artifactbucketcollection::new()","artifactory::cleaner::cli::new()","artifactory::cleaner::controller::new()","artifactory::cleaner::discoveryworker::new()","artifactory::cleaner::artifactbucket#push()","artifactory::cleaner::artifactbucket#recalculate_filesize()","artifactory::cleaner::cli::repo_table_cols()","artifactory::cleaner::artifactbucketcollection#report()","artifactory::cleaner::discoveryworker#running?()","artifactory::cleaner::discoveryworker#shutdown()","artifactory::cleaner::discoveryworker#start()","artifactory::cleaner::discoveryworker#stop()","artifactory::cleaner::discoveryworker#to_s()","artifactory::cleaner::artifactbucket#unshift()","artifactory::cleaner::cli#usage_report()","artifactory::cleaner::controller#verbose=()","artifactory::cleaner::controller#verbose?()","artifactory::cleaner::cli#version()","artifactory::cleaner::controller#with_discovered_artifacts()","artifactory::cleaner::discoveryworker#working?()","artifactory::cleaner::controller#yaml_format()","","","","","","","",""],"info":[["Artifactory","","Artifactory.html","",""],["Artifactory::Cleaner","","Artifactory/Cleaner.html","",""],["Artifactory::Cleaner::ArtifactBucket","","Artifactory/Cleaner/ArtifactBucket.html","","<p>A collection of Artifacts within a date range\n<p>An Artifactory::Cleaner::ArtifactBucket represents an “age …\n"],["Artifactory::Cleaner::ArtifactBucketCollection","","Artifactory/Cleaner/ArtifactBucketCollection.html","","<p>Organize Artifacts by age bucket for analysis\n<p>An Artifactory::Cleaner::ArtifactBucketCollection represents …\n"],["Artifactory::Cleaner::CLI","","Artifactory/Cleaner/CLI.html","","<p>Command Line Interface class, powers the artifactory-cleaner terminal\ncommand\n<p>A single Artifactory::Cleaner::CLI …\n"],["Artifactory::Cleaner::Controller","","Artifactory/Cleaner/Controller.html","","<p>Artifactory Cleaner Logic Controller\n<p>The Artifactory::Cleaner::Controller class provides logic central …\n"],["Artifactory::Cleaner::DiscoveredArtifact","","Artifactory/Cleaner/DiscoveredArtifact.html","","<p>An Artifact discovered during a repository search\n<p>This class is a wrapper of Artifactory::Resource::Artifact …\n"],["Artifactory::Cleaner::DiscoveryWorker","","Artifactory/Cleaner/DiscoveryWorker.html","","<p>Helper class representing Threads spawned to discover Artifacts\n"],["Artifactory::Cleaner::Error","","Artifactory/Cleaner/Error.html","",""],["Artifactory::Cleaner::SpecHelpers","","Artifactory/Cleaner/SpecHelpers.html","",""],["Artifactory::Cleaner::Util","","Artifactory/Cleaner/Util.html","",""],["Float","","Float.html","",""],["Object","","Object.html","",""],["<<","Artifactory::Cleaner::ArtifactBucket","Artifactory/Cleaner/ArtifactBucket.html#method-i-3C-3C","(artifact)",""],["<<","Artifactory::Cleaner::ArtifactBucketCollection","Artifactory/Cleaner/ArtifactBucketCollection.html#method-i-3C-3C","(artifact)",""],["[]","Artifactory::Cleaner::ArtifactBucketCollection","Artifactory/Cleaner/ArtifactBucketCollection.html#method-i-5B-5D","(age)",""],["[]=","Artifactory::Cleaner::ArtifactBucket","Artifactory/Cleaner/ArtifactBucket.html#method-i-5B-5D-3D","(key, artifact)",""],["add","Artifactory::Cleaner::ArtifactBucketCollection","Artifactory/Cleaner/ArtifactBucketCollection.html#method-i-add","(artifact)",""],["alive?","Artifactory::Cleaner::DiscoveryWorker","Artifactory/Cleaner/DiscoveryWorker.html#method-i-alive-3F","()","<p>Is the Thread for this worker alive?\n"],["artifact_count","Artifactory::Cleaner::ArtifactBucketCollection","Artifactory/Cleaner/ArtifactBucketCollection.html#method-i-artifact_count","()",""],["artifact_usage_search","Artifactory::Cleaner::Controller","Artifactory/Cleaner/Controller.html#method-i-artifact_usage_search","(from: nil, to: nil, repos: nil, threads: 4)","<p>Search for an artifact by its usage\n<p>@example Search for all repositories with the given usage statistics …\n"],["bucket","Artifactory::Cleaner::ArtifactBucketCollection","Artifactory/Cleaner/ArtifactBucketCollection.html#method-i-bucket","(age)",""],["bucket_sizes","Artifactory::Cleaner::ArtifactBucketCollection","Artifactory/Cleaner/ArtifactBucketCollection.html#method-i-bucket_sizes","()",""],["bucketize_artifacts","Artifactory::Cleaner::Controller","Artifactory/Cleaner/Controller.html#method-i-bucketize_artifacts","(from: nil, to: nil, increment: 30 * 24 * 3600, repos: nil, buckets: nil, threads: 4)",""],["bucketized_artifact_report","Artifactory::Cleaner::Controller","Artifactory/Cleaner/Controller.html#method-i-bucketized_artifact_report","(buckets)","<p>Given a Artifactory::Cleaner::ArtifactBucketCollection, return a String\nsummarizing the contents\n<p>TODO: …\n"],["catagorize_old_assets","Artifactory::Cleaner::Controller","Artifactory/Cleaner/Controller.html#method-i-catagorize_old_assets","(days)","<p>Deprecated, do not use\n"],["clear","Artifactory::Cleaner::ArtifactBucketCollection","Artifactory/Cleaner/ArtifactBucketCollection.html#method-i-clear","()",""],["covers?","Artifactory::Cleaner::ArtifactBucket","Artifactory/Cleaner/ArtifactBucket.html#method-i-covers-3F","(age)",""],["default_repo_table_cols","Artifactory::Cleaner::CLI","Artifactory/Cleaner/CLI.html#method-c-default_repo_table_cols","()",""],["define_buckets","Artifactory::Cleaner::ArtifactBucketCollection","Artifactory/Cleaner/ArtifactBucketCollection.html#method-i-define_buckets","(bucket_list)",""],["discover_artifacts_from_search","Artifactory::Cleaner::Controller","Artifactory/Cleaner/Controller.html#method-i-discover_artifacts_from_search","(artifact_list, threads: 4)","<p>Given a list of Artifacts, fetch information about them and return a list\nof Artifactory::Cleaner::DiscoveredArtifact …\n"],["discover_repos","Artifactory::Cleaner::Controller","Artifactory/Cleaner/Controller.html#method-i-discover_repos","()","<p>Return an ordered structure of repositories from the Artifactory server.\n<p>This method will query Artifactory …\n"],["earliest_date","Artifactory::Cleaner::DiscoveredArtifact","Artifactory/Cleaner/DiscoveredArtifact.html#method-i-earliest_date","()","<p>What&#39;s the earliest Time of any of the date/time properties on this\nobject?\n"],["earliest_date_from","Artifactory::Cleaner::DiscoveredArtifact","Artifactory/Cleaner/DiscoveredArtifact.html#method-c-earliest_date_from","(artifact)","<p>Given an Artifactory::Resource::Artifact, return the value of the earliest\ndate property on that object …\n"],["filesize","Artifactory::Cleaner::Util","Artifactory/Cleaner/Util.html#method-c-filesize","(size)","<p>Given a size in bytes, return a “human readable” size with a unit suffix\n(MiB, GiB)\n<p>Taken from …\n"],["generate_artifact","Artifactory::Cleaner::SpecHelpers","Artifactory/Cleaner/SpecHelpers.html#method-i-generate_artifact","()",""],["kill","Artifactory::Cleaner::DiscoveryWorker","Artifactory/Cleaner/DiscoveryWorker.html#method-i-kill","()",""],["last_downloaded","Artifactory::Cleaner::DiscoveredArtifact","Artifactory/Cleaner/DiscoveredArtifact.html#method-i-last_downloaded","","<p>Time representing the date and time this artifact was last downloaded by a\nclient (presumably to be installed) …\n"],["latest_date","Artifactory::Cleaner::DiscoveredArtifact","Artifactory/Cleaner/DiscoveredArtifact.html#method-i-latest_date","()","<p>What&#39;s the most recent Time of any of the date/time properties on this\nobject?\n"],["latest_date_from","Artifactory::Cleaner::DiscoveredArtifact","Artifactory/Cleaner/DiscoveredArtifact.html#method-c-latest_date_from","(artifact)","<p>Given an Artifactory::Resource::Artifact, return the value of the latest\ndate property on that object …\n"],["list_repos","Artifactory::Cleaner::CLI","Artifactory/Cleaner/CLI.html#method-i-list_repos","()",""],["new","Artifactory::Cleaner::ArtifactBucket","Artifactory/Cleaner/ArtifactBucket.html#method-c-new","(min,max=nil)",""],["new","Artifactory::Cleaner::ArtifactBucketCollection","Artifactory/Cleaner/ArtifactBucketCollection.html#method-c-new","(buckets = [30,60,90,180,365,730,1095,nil])",""],["new","Artifactory::Cleaner::CLI","Artifactory/Cleaner/CLI.html#method-c-new","(*args)",""],["new","Artifactory::Cleaner::Controller","Artifactory/Cleaner/Controller.html#method-c-new","(artifactory_config)","<p>Initialize and configure a new Artifactory::Cleaner::Controller Params:\n<p><code>artifactory_config</code> &mdash; Hash of configuration …\n\n"],["new","Artifactory::Cleaner::DiscoveryWorker","Artifactory/Cleaner/DiscoveryWorker.html#method-c-new","(processing_queues, artifactory_client)",""],["push","Artifactory::Cleaner::ArtifactBucket","Artifactory/Cleaner/ArtifactBucket.html#method-i-push","(artifact)",""],["recalculate_filesize","Artifactory::Cleaner::ArtifactBucket","Artifactory/Cleaner/ArtifactBucket.html#method-i-recalculate_filesize","()",""],["repo_table_cols","Artifactory::Cleaner::CLI","Artifactory/Cleaner/CLI.html#method-c-repo_table_cols","()",""],["report","Artifactory::Cleaner::ArtifactBucketCollection","Artifactory/Cleaner/ArtifactBucketCollection.html#method-i-report","()",""],["running?","Artifactory::Cleaner::DiscoveryWorker","Artifactory/Cleaner/DiscoveryWorker.html#method-i-running-3F","()","<p>Is this DiscoveryWorker running, listening to the queue and processing\nrequests\n"],["shutdown","Artifactory::Cleaner::DiscoveryWorker","Artifactory/Cleaner/DiscoveryWorker.html#method-i-shutdown","(timeout = 300)","<p>Stop the Thread and re-join the parent\n"],["start","Artifactory::Cleaner::DiscoveryWorker","Artifactory/Cleaner/DiscoveryWorker.html#method-i-start","()","<p>Start the DiscoveryWorker and begin processing from the queue\n"],["stop","Artifactory::Cleaner::DiscoveryWorker","Artifactory/Cleaner/DiscoveryWorker.html#method-i-stop","()","<p>Forcibly kill the Thread and destroy it\n"],["to_s","Artifactory::Cleaner::DiscoveryWorker","Artifactory/Cleaner/DiscoveryWorker.html#method-i-to_s","()","<p>String representation of this DiscoveryWorker and it&#39;s status\n"],["unshift","Artifactory::Cleaner::ArtifactBucket","Artifactory/Cleaner/ArtifactBucket.html#method-i-unshift","(artifact)",""],["usage_report","Artifactory::Cleaner::CLI","Artifactory/Cleaner/CLI.html#method-i-usage_report","()",""],["verbose=","Artifactory::Cleaner::Controller","Artifactory/Cleaner/Controller.html#method-i-verbose-3D","(val)","<p>Enable or disable verbose mode (see Controller#verbose?) When verbose mode\nis enabled, the controller …\n"],["verbose?","Artifactory::Cleaner::Controller","Artifactory/Cleaner/Controller.html#method-i-verbose-3F","()","<p>Is verbose output enabled? If so, the controller will print debugging and\nstatus information to STDERR …\n"],["version","Artifactory::Cleaner::CLI","Artifactory/Cleaner/CLI.html#method-i-version","()",""],["with_discovered_artifacts","Artifactory::Cleaner::Controller","Artifactory/Cleaner/Controller.html#method-i-with_discovered_artifacts","(from: nil, to: nil, repos: nil, increment: 30 * 24 * 3600, threads: 4)",""],["working?","Artifactory::Cleaner::DiscoveryWorker","Artifactory/Cleaner/DiscoveryWorker.html#method-i-working-3F","()","<p>Is this DiscoveryWorker currently processing a request?\n<p>when #running? is true and #working? is not, then …\n"],["yaml_format","Artifactory::Cleaner::Controller","Artifactory/Cleaner/Controller.html#method-i-yaml_format","(artifact, indent = 0)","<p>Return a YAML representation of a module\nArtifactory::Cleaner::DiscoveredArtifact\n<p>Provide a Artifactory::Cleaner::DiscoveredArtifact …\n"],["CODE_OF_CONDUCT","","CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>In the interest of fostering an open and welcoming environment, …\n"],["Gemfile","","Gemfile.html","","<p>source “rubygems.org”\n<p># Specify your gem&#39;s dependencies in artifactory-cleaner.gemspec\ngemspec …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  artifactory-cleaner (0.9.1)\n    artifactory\n    sysexits (&gt;= 1.2.0)\n    thor (~&gt; ...</pre>\n"],["README","","README_md.html","","<p>Artifactory::Cleaner\n<p>Artifactory Cleaner is a tool for managing Artifactory repositories with a\nfocus …\n"],["Rakefile","","Rakefile.html","","<p>$LOAD_PATH.unshift File.join(File.dirname(__FILE__), “lib”)\n<p>require “bundler/gem_tasks” …\n"],["artifactory-cleaner.gemspec","","artifactory-cleaner_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"],["artifactory-cleaner.iml","","artifactory-cleaner_iml.html","","<p>&lt;module type=“RUBY_MODULE” version=“4”&gt;\n\n<pre>&lt;component name=&quot;NewModuleRootManager&quot; ...</pre>\n"],["setup","","bin/setup.html","","<p>#!/usr/bin/env bash set -euo pipefail IFS=$&#39;nt&#39; set -vx\n<p>bundle install\n<p># Do any other automated …\n"]]}}